/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matrices.main.form;
import matrices.main.type.MatrixTableModel;
import matrices.math.Matrix;
import matrices.Util;
import matrices.main.type.MatrixFrame;
import javax.swing.JFrame;
/**
 *
 * @author MojoMacW7
 */
public class MatrixEdit extends MatrixFrame {
    int index = -1;
    MatrixShow matrixShow;
    Double[][] initialMatrix;
    
    private MatrixEdit(MainFrame root, MatrixFrame parent) {
        this(root, parent, -1);
    }
    public MatrixEdit(MainFrame root, MatrixFrame parent, int index) {
        super(root, parent);
        initComponents();
        matrixShow = new MatrixShow(MatrixTableModel.CELL_EDIT_ALL);
        matrixShow.showMatrixNameLabel(false);
        matrixShowHolder.add(matrixShow);
        matrixShow.setVisible(true);
        this.index = index;
        if(index < 0){
            saveButton.setEnabled(false);
        }
        loadMatrix(index);
        setVisible(true);
    }
    
    public MatrixEdit(MainFrame root, MatrixFrame parent, Double[][] matrix, String matrixName) {
        this(root, parent);
        this.index = -1;
        saveButton.setEnabled(false);
        loadMatrix(matrix, matrixName);
    }

    public void loadMatrix(int index){
        if(index < 0){
            loadMatrix(new Double[1][1], "New Matrix");
        }else{
            loadMatrix(root.getMatrix(index));
        }
    }
    public void loadMatrix(Matrix matrix){
        loadMatrix(matrix.toDoubleArray(), matrix.name);
    }

    public void loadMatrix(Double[][] data, String matrixName){
        this.initialMatrix = data;
        MatrixTableModel model = new MatrixTableModel(data, new String[data[0].length], MatrixTableModel.CELL_EDIT_ALL);
        matrixShow.setModel(model);
        matrixNameField.setText(matrixName);
        rowField.setText(String.valueOf(matrixShow.getRowCount()));
        columnField.setText(String.valueOf(matrixShow.getColumnCount()));
        pack();
    }
    public String getMatrixName(){
        return matrixNameField.getText();
    }
    
    
    public Matrix readToMatrix(){
        Matrix m = matrixShow.readToMatrix();
        m.name = getMatrixName();
        return m;
    }
    /**
     * Creates new form MatrixEdit
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        matrixNameField = new javax.swing.JTextField();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        matrixShowHolder = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        deselectButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(32767, 0));
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        removeRowButton = new javax.swing.JButton();
        rowField = new javax.swing.JFormattedTextField();
        insertRowButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(32767, 0));
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        removeColumnButton = new javax.swing.JButton();
        columnField = new javax.swing.JFormattedTextField();
        insertColumnButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Matrix");
        setPreferredSize(new java.awt.Dimension(600, 400));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        matrixNameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        matrixNameField.setText("New Matrix");
        matrixNameField.setToolTipText("Matrix name");
        matrixNameField.setDoubleBuffered(true);
        matrixNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(matrixNameField, gridBagConstraints);

        filler3.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(filler3, gridBagConstraints);

        matrixShowHolder.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(matrixShowHolder, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        deselectButton.setText("Deselect");
        deselectButton.setDoubleBuffered(true);
        deselectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        jPanel4.add(deselectButton, gridBagConstraints);

        filler1.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(filler1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Rows: ");
        jLabel1.setDoubleBuffered(true);
        jPanel2.add(jLabel1, new java.awt.GridBagConstraints());

        removeRowButton.setText("-");
        removeRowButton.setToolTipText("Remove the selected column or the last column");
        removeRowButton.setDoubleBuffered(true);
        removeRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowButtonActionPerformed(evt);
            }
        });
        jPanel2.add(removeRowButton, new java.awt.GridBagConstraints());

        rowField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        rowField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        rowField.setText("1");
        rowField.setToolTipText("You can set row count by editing this field and pressing enter.");
        rowField.setDoubleBuffered(true);
        rowField.setMinimumSize(new java.awt.Dimension(40, 24));
        rowField.setPreferredSize(new java.awt.Dimension(40, 24));
        rowField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(rowField, gridBagConstraints);

        insertRowButton.setText("+");
        insertRowButton.setToolTipText("Insert a new row before the selected row or add a new one at the end");
        insertRowButton.setDoubleBuffered(true);
        insertRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertRowButtonActionPerformed(evt);
            }
        });
        jPanel2.add(insertRowButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel2, gridBagConstraints);

        filler2.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(filler2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Columns: ");
        jLabel2.setDoubleBuffered(true);
        jPanel3.add(jLabel2, new java.awt.GridBagConstraints());

        removeColumnButton.setText("-");
        removeColumnButton.setToolTipText("Remove the selected column or the last column");
        removeColumnButton.setDoubleBuffered(true);
        removeColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColumnButtonActionPerformed(evt);
            }
        });
        jPanel3.add(removeColumnButton, new java.awt.GridBagConstraints());

        columnField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        columnField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        columnField.setText("1");
        columnField.setToolTipText("You can set column count by editing this field and pressing enter.");
        columnField.setDoubleBuffered(true);
        columnField.setMinimumSize(new java.awt.Dimension(40, 24));
        columnField.setPreferredSize(new java.awt.Dimension(40, 24));
        columnField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(columnField, gridBagConstraints);

        insertColumnButton.setText("+");
        insertColumnButton.setToolTipText("Insert a new column before the selected column or add a new column at the end");
        insertColumnButton.setDoubleBuffered(true);
        insertColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertColumnButtonActionPerformed(evt);
            }
        });
        jPanel3.add(insertColumnButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jPanel4, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        closeButton.setText("Close");
        closeButton.setDoubleBuffered(true);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(closeButton, new java.awt.GridBagConstraints());

        resetButton.setText("Reset");
        resetButton.setDoubleBuffered(true);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jPanel1.add(resetButton, new java.awt.GridBagConstraints());

        saveButton.setText("Save");
        saveButton.setDoubleBuffered(true);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveButton, new java.awt.GridBagConstraints());

        saveAsButton.setText("Save As");
        saveAsButton.setDoubleBuffered(true);
        saveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveAsButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void insertRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertRowButtonActionPerformed
        // TODO add your handling code here:
        int row = matrixShow.getSelectedRow();
        int rc = matrixShow.getRowCount();
        if (row < 0){
            matrixShow.addRow();
        }else{
            matrixShow.insertRow(row);
        }
        
        rowField.setText(String.valueOf(rc+1));
    }//GEN-LAST:event_insertRowButtonActionPerformed

    private void removeRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowButtonActionPerformed
        // TODO add your handling code here:
        int rc = matrixShow.getRowCount();
        if(rc == 1){
            return;
        }
        int row = matrixShow.getSelectedRow();
        if (row < 0){
            matrixShow.removeRow();
        }else{
            matrixShow.removeRow(row);
        }
        rowField.setText(String.valueOf(rc-1));
        
    }//GEN-LAST:event_removeRowButtonActionPerformed

    private void saveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsButtonActionPerformed
        // TODO add your handling code here:
        matrixShow.stopCellEditing();
        root.addMatrix(readToMatrix());
        dispose();
    }//GEN-LAST:event_saveAsButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        matrixShow.stopCellEditing();
        root.alterMatrix(index, readToMatrix());
        dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void deselectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectButtonActionPerformed
        // TODO add your handling code here:
        matrixShow.clearSelection();
    }//GEN-LAST:event_deselectButtonActionPerformed

    private void removeColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColumnButtonActionPerformed
        // TODO add your handling code here:
        int cc = matrixShow.getColumnCount();
        if(cc==1){
            return;
        }
        int col = matrixShow.getSelectedColumn();
        if (col < 0){
            matrixShow.removeColumn();
        }else{
            matrixShow.removeColumn(col);
        }
        columnField.setText(String.valueOf(cc-1));
    }//GEN-LAST:event_removeColumnButtonActionPerformed

    private void insertColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertColumnButtonActionPerformed
        // TODO add your handling code here:
        
        int col = matrixShow.getSelectedColumn();
        int cc = matrixShow.getColumnCount();
        if (col < 0){
            matrixShow.addColumn();
        }else{
            matrixShow.insertColumn(col);
        }
        
        columnField.setText(String.valueOf(cc+1));
    }//GEN-LAST:event_insertColumnButtonActionPerformed

    private void columnFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnFieldActionPerformed
        // TODO add your handling code here:
        try{
            int cc = Integer.parseInt(columnField.getText());
            if(cc < 1){
                Util.showError(this, "Kolom tidak boleh kurang dari 1");
                return;
            }
            this.matrixShow.setColumnCount(cc);
        }catch(NumberFormatException ex){
        }
    }//GEN-LAST:event_columnFieldActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        loadMatrix(initialMatrix, getMatrixName());
    }//GEN-LAST:event_resetButtonActionPerformed

    private void rowFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowFieldActionPerformed
        // TODO add your handling code here:
        try{
            int rc = Integer.parseInt(rowField.getText());
            if(rc < 1){
                Util.showError(this, "Baris tidak boleh kurang dari 1");
                return;
            }
            this.matrixShow.setRowCount(rc);
        }catch(NumberFormatException ex){
        }
    }//GEN-LAST:event_rowFieldActionPerformed

    private void matrixNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_matrixNameFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatrixEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatrixEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatrixEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatrixEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JFormattedTextField columnField;
    private javax.swing.JButton deselectButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JButton insertColumnButton;
    private javax.swing.JButton insertRowButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField matrixNameField;
    private javax.swing.JPanel matrixShowHolder;
    private javax.swing.JButton removeColumnButton;
    private javax.swing.JButton removeRowButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JFormattedTextField rowField;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
