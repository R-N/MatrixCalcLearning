/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matrices.main.form;
import matrices.Util;
import matrices.math.Matrix;
import matrices.main.type.MatrixFrame;
import javax.swing.JFrame;
/**
 *
 * @author MojoMacW7
 */
public class MatrixNew extends MatrixFrame {
    /**
     * Creates new form MatrixOrdo
     */
    public MatrixNew(MainFrame root, MatrixFrame parent) {
        super(root, parent);
        initComponents();
        refreshFields();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel2 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        nameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        matrixTypeCB = new matrices.main.type.ComboBox<>();
        label1 = new javax.swing.JLabel();
        field1 = new javax.swing.JFormattedTextField();
        label2 = new javax.swing.JLabel();
        field2 = new javax.swing.JFormattedTextField();
        label3 = new javax.swing.JLabel();
        field3 = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Matrix");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Name");
        jLabel2.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jLabel2, gridBagConstraints);

        filler1.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        getContentPane().add(filler1, gridBagConstraints);

        nameField.setDoubleBuffered(true);
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(nameField, gridBagConstraints);

        jLabel5.setText("Type");
        jLabel5.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jLabel5, gridBagConstraints);

        matrixTypeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Custom", "Scalar", "Uniform" }));
        matrixTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixTypeCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(matrixTypeCB, gridBagConstraints);

        label1.setText("Row Count ");
        label1.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(label1, gridBagConstraints);

        field1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        field1.setDoubleBuffered(true);
        field1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                field1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(field1, gridBagConstraints);

        label2.setText("Column Count ");
        label2.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(label2, gridBagConstraints);

        field2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        field2.setDoubleBuffered(true);
        field2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                field2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(field2, gridBagConstraints);

        label3.setText("Value");
        label3.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(label3, gridBagConstraints);

        field3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####.###########################"))));
        field3.setDoubleBuffered(true);
        field3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                field3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(field3, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        cancelButton.setText("Cancel");
        cancelButton.setDoubleBuffered(true);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton, new java.awt.GridBagConstraints());

        okButton.setText("OK");
        okButton.setDoubleBuffered(true);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel1.add(okButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void createEditorScalar(){
        int size = 0;
        try{
            size = Integer.parseInt(field1.getText());
        }catch(NumberFormatException ex){
            Util.showError(this, "Ukuran salah");
            return;
        }
        if (size < 1){
            Util.showError(this, "Ukuran harus positif");
            return;
        }
        
        String name = nameField.getText();
        String sValue = field3.getText().trim();
        MatrixEdit editor;
        
        double value = 0;
        try{
            value = Util.parseCoefficient(sValue);
        }catch(NumberFormatException ex){
            Util.showError(this, "Nilai salah");
            return;
        }
        editor = new MatrixEdit(root, parent, Matrix.getScalarMatrix(size, value).toDoubleArray(), name);
        
        editor.setTitle("New Matrix");
        this.parent=editor;
        this.dispose();
    }
    
    public void createEditorCustom(){
        int rc = 0;
        try{
            rc = Integer.parseInt(field1.getText());
        }catch(NumberFormatException ex){
            Util.showError(this, "Jumlah baris salah");
            return;
        }
        if (rc < 1){
            Util.showError(this, "Jumlah baris harus positif");
            return;
        }
        int cc = 0;
        try{
            cc = Integer.parseInt(field2.getText());
        }catch(NumberFormatException ex){
            Util.showError(this, "Jumlah baris salah");
            return;
        }
        if (cc < 1){
            Util.showError(this, "Jumlah baris harus positif");
            return;
        }
        
        String name = nameField.getText();
        MatrixEdit editor = new MatrixEdit(root, parent, new Double[rc][cc], name);
        editor.setTitle("New Matrix");
        this.parent=editor;
        this.dispose();
    }
    
    public void createEditorUniform(){
        int rc = 0;
        try{
            rc = Integer.parseInt(field1.getText());
        }catch(NumberFormatException ex){
            Util.showError(this, "Jumlah baris salah");
            return;
        }
        if (rc < 1){
            Util.showError(this, "Jumlah baris harus positif");
            return;
        }
        int cc = 0;
        try{
            cc = Integer.parseInt(field2.getText());
        }catch(NumberFormatException ex){
            Util.showError(this, "Jumlah baris salah");
            return;
        }
        if (cc < 1){
            Util.showError(this, "Jumlah baris harus positif");
            return;
        }
        
        String name = nameField.getText();
        
        String sValue = field3.getText().trim();
        MatrixEdit editor;
        if(sValue.isEmpty()){
            editor = new MatrixEdit(root, parent, new Double[rc][cc], name);
        }else{
            double value = 0;
            try{
                value = Util.parseDouble(sValue);
            }catch(NumberFormatException ex){
                Util.showError(this, "Nilai salah");
                return;
            }
            editor = new MatrixEdit(root, parent, Matrix.getUniformMatrix(rc, cc, value).toDoubleArray(), name);
        }
        editor.setTitle("New Matrix");
        this.parent=editor;
        this.dispose();
    }
    
    public void refreshFields(){
        
        int type = matrixTypeCB.getSelectedIndex();
        if(type == 0){
            label1.setText("Row Count ");
            
            label2.setVisible(true);
            field2.setVisible(true);
            
            label3.setVisible(false);
            field3.setVisible(false);
        }else if (type == 1){
            label1.setText("Size ");
            
            label2.setVisible(false);
            field2.setVisible(false);
            
            label3.setVisible(true);
            field3.setVisible(true);
        }else if (type == 2){
            label1.setText("Row Count ");
            
            label2.setVisible(true);
            field2.setVisible(true);
            
            label3.setVisible(true);
            field3.setVisible(true);
        }
        pack();
    }
    public void createEditor(){
        
        int type = matrixTypeCB.getSelectedIndex();
        if(type == 0){
            createEditorCustom();
        }else if (type == 1){
            createEditorScalar();
        }else if (type == 2){
            createEditorUniform();
        }
    }
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        createEditor();
    }//GEN-LAST:event_okButtonActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void field2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_field2ActionPerformed
        // TODO add your handling code here:
        
        if(matrixTypeCB.getSelectedIndex() == 0) createEditor();
    }//GEN-LAST:event_field2ActionPerformed

    private void field3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_field3ActionPerformed
        // TODO add your handling code here:
        if(matrixTypeCB.getSelectedIndex() == 2) createEditor();
    }//GEN-LAST:event_field3ActionPerformed

    private void matrixTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixTypeCBActionPerformed
        // TODO add your handling code here:
        refreshFields();
    }//GEN-LAST:event_matrixTypeCBActionPerformed

    private void field1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_field1ActionPerformed
        // TODO add your handling code here:
        
        if(matrixTypeCB.getSelectedIndex() == 1) createEditor();
    }//GEN-LAST:event_field1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatrixNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatrixNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatrixNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatrixNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JFormattedTextField field1;
    private javax.swing.JFormattedTextField field2;
    private javax.swing.JFormattedTextField field3;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private matrices.main.type.ComboBox<String> matrixTypeCB;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
